-- =====================
-- DROP TABLES IF THEY EXIST
-- =====================
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Customers;

-- =====================
-- CREATE Customers TABLE
-- =====================
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    city VARCHAR(50)
);

-- =====================
-- CREATE Orders TABLE
-- =====================
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- =====================
-- INSERT DATA INTO Customers
-- =====================
INSERT INTO Customers (customer_id, name, city) VALUES
(1, 'Alice', 'New York'),
(2, 'Bob', 'Chicago'),
(3, 'Charlie', 'Los Angeles'),
(4, 'David', 'Houston');

-- =====================
-- INSERT DATA INTO Orders
-- =====================
INSERT INTO Orders (order_id, customer_id, order_date, amount) VALUES
(101, 1, '2024-06-01', 250.00),
(102, 1, '2024-06-05', 180.00),
(103, 2, '2024-06-10', 340.00),
(104, 5, '2024-06-15', 90.00);  -- Order with invalid customer_id, will fail due to foreign key constraint

-- =====================
-- INNER JOIN: Customers with Orders
-- =====================
SELECT c.name AS customer_name, o.order_id, o.amount
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id;

-- =====================
-- LEFT JOIN: All Customers even if no Orders
-- =====================
SELECT c.name AS customer_name, o.order_id, o.amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- =====================
-- RIGHT JOIN: All Orders even if Customer missing (rare if FK is enforced)
-- =====================
SELECT c.name AS customer_name, o.order_id, o.amount
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;

-- =====================
-- FULL JOIN: All Customers and Orders (matches and unmatched)
-- =====================
SELECT c.name AS customer_name, o.order_id, o.amount
FROM Customers c
FULL JOIN Orders o ON c.customer_id = o.customer_id;

-- =====================
-- SCALAR SUBQUERY: Show each customer with total customer count
-- =====================
SELECT 
    name,
    (SELECT COUNT(*) FROM Customers) AS total_customers
FROM Customers;

-- =====================
-- CORRELATED SUBQUERY: Each customer with their total order amount
-- =====================
SELECT 
    c.name,
    (SELECT SUM(o.amount) FROM Orders o WHERE o.customer_id = c.customer_id) AS total_order_amount
FROM Customers c;

-- =====================
-- SUBQUERY IN: Customers who have placed orders
-- =====================
SELECT name
FROM Customers
WHERE customer_id IN (SELECT customer_id FROM Orders);

-- =====================
-- SUBQUERY EXISTS: Customers who have orders
-- =====================
SELECT c.name
FROM Customers c
WHERE EXISTS (
    SELECT 1 FROM Orders o WHERE o.customer_id = c.customer_id
);

-- =====================
-- SUBQUERY with SCALAR: Customers whose total order amount = 430
-- =====================
SELECT name
FROM Customers
WHERE (
    SELECT SUM(amount)
    FROM Orders
    WHERE Orders.customer_id = Customers.customer_id
) = 430;  -- Alice has two orders: 250 + 180 = 430


-- =====================
-- CREATE VIEW: Complex SELECT with JOIN & Aggregation
-- Shows customers and their total order amounts
-- =====================
CREATE VIEW CustomerOrderSummary AS
SELECT 
    c.customer_id,
    c.name AS customer_name,
    c.city,
    COALESCE(SUM(o.amount), 0) AS total_order_amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name, c.city;

-- To query the above view:
-- SELECT * FROM CustomerOrderSummary;

-- =====================
-- CREATE VIEW: Secure Abstraction - hides customer_id, exposes order details
-- =====================
CREATE VIEW PublicCustomerOrders AS
SELECT 
    c.name AS customer_name,
    o.order_id,
    o.order_date,
    o.amount
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id;

-- To query the above view:
-- SELECT * FROM PublicCustomerOrders;

